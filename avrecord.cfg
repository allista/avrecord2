//                 avrecord configuration file                    //

paths:
{
	//path for logfile
	log_file   = "/etc/avrecord/avrecord.log";

	//output directory where generated movies will be saved
	output_dir = "/home";

	//name template for output movies
	filename   = "movie-%Y-%m-%d_%H-%M.avi";
};

video:
{
	//video device file
	device = "/dev/video0";

	//device inputs (set on initialization)
	inputs = [];
	//choosen input
	input = 1;

	//standarts supported by device (set on initialization)
	standards = [];
	//choosen standart
	standard = "";

	//device controls (set on initialization)
	controls:
	{
	};

	//captured image width
	width = 640;

	//captured image heigh
	height = 480;

	//video codecs (see ffmpeg -formats for details)
	codecs = [];
	//choosen video codec
	codec = "msmpeg4";

	//bits per second
	bitrate  = 2500000;

	//quantizer value for variable bitrate: 0 for constant bitrate, 2-31 for variable with different quality (2 -- is the best, 31 -- is the worst)
	var_bitrate  = 2;
};

audio:
{
	//codec name (see ffmpeg -formats for details)
	codec  = "mp2";

	//samples per second
	sample_rate  = 44100;

	//bits per second
	bitrate  = 96000;

	//number of audio channel
	channels = 1;

	//desired buffer length (in frames; 0 means auto)
	buffer_length = 0;

	//each audio sample will be multiplied on this value
	amplification_level = 20;
};

switches:
{
	//if true, do motion detection
	detect_motion    = true;

	//if true, do noise detection
	detect_noise     = false;

	//if true, record only when motion (or noise, if correspondig flag is set) is detected
	record_on_motion = true;

	//if true, record only when noise (or motion, if correspondig flag is set) is detected
	record_on_noise  = false;

	//if true, print number of motion pixels to the image
	print_diffs      = true;

	//if true, print sound noise level
	print_level      = false;

	//if true, print current date to the image
	print_date       = true;
};

detection:
{
	//time of no_motion that is required for starting new movie file
	min_gap = 300; //seconds

	//movie duratioin that is required for starting new movie file
	min_record_time = 30; //minutes

	//when there's no motion, continue recordig during this time
	post_motion_offset = 30; //seconds

	//number of frames to write before the one on wich motion (or noise) was detected
	latency = 8;	//value: 2 or grater

	//step in frames between the two compared ones
	frames_step = 5; //value: from 1 or grater

	//when detecting a motion, difference between two pixels is compared with this value
	noise_level = 2;

	//a motion is detected when number of differing pixels is grater than this value
	threshold   = 25;

	//check each n-th pixel for difference
	pixels_step = 1;

	//how many times to erode captured image to remove a noise
	noise_reduction_level = 1;

	//function for sound noise level calculation: 0 - linear (default), 1 - 2pwr root, 2 - 4pwr root, 3 - 8pwr root, 4 - 2pwr, 5 - 4pwr, 6 - 8pwr
	snd_noise_level_func = 0;

	//sound noise is detected when noise level calculated with the "noise_level_function" is grater than this value (0 - 1000)
	snd_noise_threshold  = 250;
};

schedule:
{
	//defines time, when recording will be started
	start_time = ""; //"dd.mm.yyyy-hh:mm:ss"

	//defines time, when recording will be finished
	end_time   = ""; //"dd.mm.yyyy-hh:mm:ss"

	//array of timestamp pairs. If not empty, record only when current time is between any pair.
	schedule   = []; //["hh:mm:ss-hh:mm:ss","hh:mm:ss-hh:mm:ss";...]
};